/*
 * Record Keeper-Records Data and stores them in a database
    Copyright (C) 2014  Michel Thomas

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package ui;

import Services.Data.IO.Binary.Loader;
import Services.Data.IO.Binary.Saver;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import internalFiles.*;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.ButtonGroup;
/**
 *
 * @author Michel Thomas
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form frame1
     */
//   public static int currentTab=1;
    int x;
    int y;
    int recnum=1;
    String[] datafound;
//    
//   static ArrayList cache=new ArrayList();
//   ArrayList temp=new ArrayList();
     DatabaseManager DBManager=new DatabaseManager();
    public Main() throws IOException, SQLException {
        
        initComponents();
       
      
       Dimension dim= Toolkit.getDefaultToolkit().getScreenSize();
       int w=this.getSize().width;
       int h=this.getSize().height;
       
        x=(dim.width-w)/2;
        y=(dim.height-h)/2;
       
       this.setLocation(x,y);
      arrangeList(); 
       
//        jTabbedPane1.removeTabAt(jTabbedPane1.getSelectedIndex());
//        internalFiles.RecordPanel rec =new    internalFiles.RecordPanel(recnum);
//        jTabbedPane1.add("New Record "+(recnum), rec );
//        cache.add(rec);
//      String path=(System.getProperty("user.home"));
//       File dir=new File(path+"\\recordkeeperDB");
//       Listing listing=new Listing();
//       if(dir.exists()){
//       listing.getRecords(path+"\\recordkeeperDB\\SNGLD.Dat",path+"\\recordkeeperDB\\MLD.Dat");
//       temp=listing.list23;
//       int k=0;
//       while(k<temp.size()){
//           cache.add(temp.get(k));
//           k++;
//       }
//       
//       }
//       else{
//         dir.mkdir();   
//       }
//    }
//    public void setTitlefortab(String title){
//     jTabbedPane1.setTitleAt(jTabbedPane1.getSelectedIndex(), title);   
//    }
//
// public void changeList(){
//    String[] strings1=new String[cache.size()];
//    for(;;){
//        
//    }
//      
 }
     public void removeTab1(int tabn){
     jTabbedPane1.removeTabAt(tabn);   
    }
     String[] string1;
     public void arrangeList() throws SQLException{
         if(DBManager.getNumberOfRecords()==0){
             
           System.out.println("Number of records="+DBManager.getNumberOfRecords());   
            jList1.setModel(new javax.swing.AbstractListModel() {
        String[]     strings2 = {};
            public int getSize() { return strings2.length; }
            public Object getElementAt(int i) { return strings2[i]; }
        });
              jList1.repaint();
         }
         else{
        string1=new String[(int)DBManager.getNumberOfRecords()];
         for(int i=0;i<DBManager.getNumberOfRecords();i++){
             DBManager.setCurrentRow(i+1);
             string1[i]=(DBManager.getName(i)+"_"+(i+1)).toLowerCase();
             
         }
         Arrays.sort(string1);
         
         jList1.setModel(new javax.swing.AbstractListModel() {
        String[]     strings2 = string1;
            public int getSize() { return strings2.length; }
            public Object getElementAt(int i) { return strings2[i]; }
        });
         jList1.repaint();
             }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem4 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem4.setText("jMenuItem4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Record Keeper");
        setIconImage((new ImageIcon(getClass().getResource("/pics/recordKeeperIco.png"))).getImage());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton1.setText("Create");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.setMaximumSize(new java.awt.Dimension(87, 39));
        jButton1.setPreferredSize(new java.awt.Dimension(105, 39));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton2.setText("Delete ");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton2.setPreferredSize(new java.awt.Dimension(105, 39));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton3.setText("Edit");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton3.setPreferredSize(new java.awt.Dimension(105, 39));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton4.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton4.setText("Save");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton4.setPreferredSize(new java.awt.Dimension(105, 39));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jButton7.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jButton7.setText("Close");
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setPreferredSize(new java.awt.Dimension(105, 39));
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton7);
        jToolBar1.add(filler1);

        jSeparator2.setOpaque(true);
        jToolBar1.add(jSeparator2);

        jScrollPane1.setViewportView(jList1);

        jTextField1.setText("Search");
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        recnum=(int)  DBManager.getNumberOfRecords();

        System.out.println("Number of records="+recnum);
        jTabbedPane1.add(new RecordPanel(++recnum,false));
        try{
            DBManager.createNewRow();
            DBManager.setSerialNumber(recnum, (int)DBManager.getCurrentRow());}
        catch(SQLException e){
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(),"Error",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        jTabbedPane1.setTitleAt(jTabbedPane1.getSelectedIndex(),"New Record "+recnum);

        jButton5.setText("About");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Copyright (C) 2015 Michel Thomas ");

        jMenu1.setText("File");

        jMenuItem5.setText("Create ");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem6.setText("Edit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Delete");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Licence");
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton5)
                    .addComponent(jLabel3))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
    if(((jTextField1.getText()).trim()).equals("Search")){
        jTextField1.setText("");
    }
    else{
        ;
    }
    }//GEN-LAST:event_jTextField1MouseClicked

    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
       if(jTextField1.getText().trim().equals("")||jTextField1.getText().trim().equals(" ")){
           jTextField1.setText("Search");
       
        try {
            arrangeList();
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }                                                                                    }
       else{
           
           ; 
            }
    }//GEN-LAST:event_jTextField1FocusLost

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        About.main();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//recnum=(int)DBManager.getNumberOfRecords();    START HERE PROBLEM WITH THIS CODE!!! MAKING IT 0 EVERYTIME!     
   
        
//        if(jTabbedPane1.getTabCount()==recnum){
//            
//        }
//        else{
//            
//        }
//        RecordPanel or;
//       
//        for(int j=0;j<jTabbedPane1.getTabCount();j++){
//            or=(RecordPanel)(jTabbedPane1.getComponentAt(j));
//            if(or.tabNo==(int)DBManager.getNumberOfRecords()){
//            // or.tabNo++;
//                recnum++;
//            }
//        }
        
      jTabbedPane1.add("New Record "+(++recnum),new RecordPanel(recnum,false));
       

       
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
           About.main();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     try{ 
         
         int RecordsToDelete[]=jList1.getSelectedIndices();
         int serialIDs[]=new int[jList1.getSelectedIndices().length];
       String selectedStrings[]=new String[jList1.getSelectedIndices().length];
       for(int i=0;i<RecordsToDelete.length;i++){
           //jList1.setSelectedIndex(RecordsToDelete[i]);
           selectedStrings[i]=jList1.getSelectedValuesList().get(i).toString();
             int pos=selectedStrings[i].indexOf("_");
             int serialID=Integer.parseInt(selectedStrings[i].substring(pos+1,selectedStrings[i].length()));
           System.out.println(serialID);
             serialIDs[i]=serialID;
               DBManager.setCurrentRow(serialID);
                 DBManager.delete(0);
                   
       }
       DBManager.reload();
       
       javax.swing.JOptionPane.showMessageDialog(this, "Delete operation Successful","Delete", javax.swing.JOptionPane.INFORMATION_MESSAGE);       
       arrangeList();
     recnum=(int)DBManager.getNumberOfRecords();
     int j=jTabbedPane1.getTabCount()-1;
       for( ;j>=0;j--){
           RecordPanel reco=(RecordPanel)(jTabbedPane1.getComponentAt(j));//-1
       for(int k=0;k<serialIDs.length;k++){
           System.out.println("is "+reco.tabNo+"=="+serialIDs[k]);
           if(reco.tabNo==serialIDs[k]){
            this.removeTab1(j--);
            
            
            break;
        }
           else{
           ;  
           }
       }
       }
     }
            catch (SQLException ex) {
             javax.swing.JOptionPane.showMessageDialog(this, "Delete operation failed:"+ex.getMessage(),"ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
           
         }
           
//            selected=jList1.getSelectedIndex();
//          selectedString=jList1.getSelectedValue().toString();
//          int pos=selectedString.indexOf("_");
//          int serialID=Integer.parseInt(selectedString.substring(pos+1,selectedString.length()));
//          try {
//              DBManager.setCurrentRow(serialID);
//          } catch (SQLException ex) {
//              javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(),"ERROR",javax.swing.JOptionPane.ERROR_MESSAGE);
//          }
       
        
    }//GEN-LAST:event_jButton2ActionPerformed

   
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    RecordPanel rec=(RecordPanel) (jTabbedPane1.getComponentAt(jTabbedPane1.getSelectedIndex()));
    RecordPanel or;
//    int flag=0;
//    for(int j=0;j<jTabbedPane1.getTabCount();j++){
//            or=(RecordPanel)(jTabbedPane1.getComponentAt(j));
//            if(or.tabNo==rec.tabNo){
//            // or.tabNo++;
//                flag++;
//            }
//        }
//    if(flag>1){
//         for(int j=0;j<jTabbedPane1.getTabCount();j++){
//            or=(RecordPanel)(jTabbedPane1.getComponentAt(j));
////            if(or.tabNo==rec.tabNo){
////            // or.tabNo++;
////                flag++;
////            }
//            if(j!=jTabbedPane1.getSelectedIndex()){
//                or.tabNo++;
//            }
//        }
//    }
    if(rec.Edit==true){
        try {
            DBManager.setSerialNumber(rec.tabNo, rec.tabNo);
            DBManager.setName(rec.nameVar.getText(), rec.tabNo);
            DBManager.setDOB(rec.dob.getText(), rec.tabNo);
            DBManager.setGender(rec.getGender(), rec.tabNo);
            DBManager.setMarital_Status(rec.getMarStat(), rec.tabNo);
            DBManager.setAadhar_ID(rec.aID.getText(), rec.tabNo);
            DBManager.setEmail_ID(rec.eID.getText(), rec.tabNo);
            DBManager.setNationality(rec.nationality.getText(), rec.tabNo);
            DBManager.setAddress(rec.address.getText(), rec.tabNo);
            DBManager.setPhNo(rec.phNo.getText(), rec.tabNo);
            DBManager.setMbno(rec.MbNo.getText(), rec.tabNo);
            DBManager.setSBJ(rec.subject.getText(), rec.tabNo);
            DBManager.setPID(rec.PID.getText(), rec.tabNo);
            DBManager.setCG(rec.CG.getText(), rec.tabNo);
            DBManager.update();
            arrangeList();
             javax.swing.JOptionPane.showMessageDialog(this,"Save operation successful","Save data",javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(this,"Save operation failed","Save data",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    //code to be completed
    
    }
    else{
        try {
            rec.Edit=true;
            DBManager.createNewRow();
            rec.tabNo=(int) DBManager.getCurrentRow();
            System.out.println("Current row="+rec.tabNo);
            DBManager.setSerialNumber(rec.tabNo, rec.tabNo);
            DBManager.setName(rec.nameVar.getText(), rec.tabNo);
            DBManager.setDOB(rec.dob.getText(), rec.tabNo);
            DBManager.setGender(rec.getGender(), rec.tabNo);
            DBManager.setMarital_Status(rec.getMarStat(), rec.tabNo);
            DBManager.setAadhar_ID(rec.aID.getText(), rec.tabNo);
            DBManager.setEmail_ID(rec.eID.getText(), rec.tabNo);
            DBManager.setNationality(rec.nationality.getText(), rec.tabNo);
            DBManager.setAddress(rec.address.getText(), rec.tabNo);
            DBManager.setPhNo(rec.phNo.getText(), rec.tabNo);
            DBManager.setMbno(rec.MbNo.getText(), rec.tabNo);
            DBManager.setSBJ(rec.subject.getText(), rec.tabNo);
            DBManager.setPID(rec.PID.getText(), rec.tabNo);
            DBManager.setCG(rec.CG.getText(), rec.tabNo);
            DBManager.save();
          // recnum=(int)DBManager.getNumberOfRecords();
            arrangeList();
            javax.swing.JOptionPane.showMessageDialog(this,"Save operation successful","Save data",javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
           javax.swing.JOptionPane.showMessageDialog(this,"Save operation failed","Save data",javax.swing.JOptionPane.ERROR_MESSAGE);
        
    }
    }
    
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
  int selected=0;                      //5-6-2008 EDIT CODE HAS AN ISSUE,CREATES DUPLICATE SERIAL ID
  String selectedString="";
        if  ( jList1.getSelectedIndex()!=-1){
      try {
          selected=jList1.getSelectedIndex();
          selectedString=jList1.getSelectedValue().toString();
          int pos=selectedString.indexOf("_");
          int serialID=Integer.parseInt(selectedString.substring(pos+1,selectedString.length()));
          int j=jTabbedPane1.getTabCount()-1;
          boolean ifTabAlreadyExists=false;
            for( ;j>=0;j--){
           RecordPanel reco=(RecordPanel)(jTabbedPane1.getComponentAt(j));//-1
      
           if(reco.tabNo==serialID){
            
            ifTabAlreadyExists=true;
              
               break;        
           }
        
           else{
           ;  
           }
          }
          
          
          try {
              DBManager.setCurrentRow(serialID);
          } catch (SQLException ex) {
              javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(),"ERROR",javax.swing.JOptionPane.ERROR_MESSAGE);
          }
          if(ifTabAlreadyExists==false){
          RecordPanel rec =new RecordPanel(serialID,true);
          jTabbedPane1.add("New Record "+(serialID), rec );
          
          rec.nameVar.setText(DBManager.getName(recnum));
          rec.dob.setText(DBManager.getDOB(recnum));
          if(DBManager.getGender(recnum).equalsIgnoreCase("Male")){
              rec.jRadioButton1.setSelected(true);
          }
          else if(DBManager.getGender(recnum).equalsIgnoreCase("Female")){
              rec.jRadioButton2.setSelected(true);
          }
          else if( DBManager.getGender(recnum).equalsIgnoreCase("other")){
              rec.jRadioButton3.setSelected(true);
          }
          
          if(DBManager.getMarital_Status(recnum).equalsIgnoreCase("Single")){
              rec.jComboBox1.setSelectedIndex(0);
          }
          else if(DBManager.getMarital_Status(recnum).equalsIgnoreCase("Married")){
              rec.jComboBox1.setSelectedIndex(1);
          }
          else if(DBManager.getMarital_Status(recnum).equalsIgnoreCase("Divorced")){
              rec.jComboBox1.setSelectedIndex(2);
          }
          rec.nationality.setText(DBManager.getNationality(recnum));
          try {
              rec.eID.setText(DBManager.getEmailID(recnum));
          } catch (SQLException ex) {
              Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
          }
          try {
              rec.aID.setText(DBManager.getAadharID(1));
          } catch (SQLException ex) {
              Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
          }
          
          try {
              rec.address.setText(DBManager.getAddress(recnum));
          } catch (SQLException ex) {
              Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
          }
          
          rec.phNo.setText(DBManager.getPhNo(recnum));
          rec.MbNo.setText(DBManager.getMbNo(recnum));
          rec.subject.setText(DBManager.getSBJ(recnum));
          rec.PID.setText(DBManager.getPID(recnum));
          rec.CG.setText(DBManager.getCG(recnum));
          }
          else{
           //Nothing should happen if the tab already exists...
              javax.swing.JOptionPane.showMessageDialog(this, "The record \'"+DBManager.getName(recnum)+"_"+DBManager.getSerialNumber(recnum)+"\'"+" "+"is already open for editing",null,javax.swing.JOptionPane.ERROR_MESSAGE);
          }
      } catch (SQLException ex) {
          Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
      
    //  jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount());
   }
   else{
    ;   
   }
      
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
      String charac="";
      charac=charac+evt.getKeyChar();
      int flag=0;
      for(int i=0;i<string1.length;i++){
      
          if(string1[i].contains(charac)){
              flag++;
          }
          else{
              ;
          }
          
          
      }
       datafound=new String[flag];
        System.out.println(flag);
      for(int k=0,j=0;j<string1.length;j++){
            if(string1[j].contains(charac)){
               datafound[k]=string1[j];
               k++;
                                            }
          else{
              ;
               }
      }
        jList1.setModel(new javax.swing.AbstractListModel() {
        String[]     strings2 = datafound;
            public int getSize() { return strings2.length; }
            public Object getElementAt(int i) { return strings2[i]; }
        });
      
          
      
     //to be compmpleted....from here !!!!!!!!!
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
         jTabbedPane1.add("New Record "+(++recnum),new RecordPanel(recnum,false));
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
         int selected=0;                      //5-6-2008 EDIT CODE HAS AN ISSUE,CREATES DUPLICATE SERIAL ID
  String selectedString="";
        if  ( jList1.getSelectedIndex()!=-1){
      try {
          selected=jList1.getSelectedIndex();
          selectedString=jList1.getSelectedValue().toString();
          int pos=selectedString.indexOf("_");
          int serialID=Integer.parseInt(selectedString.substring(pos+1,selectedString.length()));
          int j=jTabbedPane1.getTabCount()-1;
          boolean ifTabAlreadyExists=false;
            for( ;j>=0;j--){
           RecordPanel reco=(RecordPanel)(jTabbedPane1.getComponentAt(j));//-1
      
           if(reco.tabNo==serialID){
            
            ifTabAlreadyExists=true;
              
               break;        
           }
        
           else{
           ;  
           }
          }
          
          
          try {
              DBManager.setCurrentRow(serialID);
          } catch (SQLException ex) {
              javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(),"ERROR",javax.swing.JOptionPane.ERROR_MESSAGE);
          }
          if(ifTabAlreadyExists==false){
          RecordPanel rec =new RecordPanel(serialID,true);
          jTabbedPane1.add("New Record "+(serialID), rec );
          
          rec.nameVar.setText(DBManager.getName(recnum));
          rec.dob.setText(DBManager.getDOB(recnum));
          if(DBManager.getGender(recnum).equalsIgnoreCase("Male")){
              rec.jRadioButton1.setSelected(true);
          }
          else if(DBManager.getGender(recnum).equalsIgnoreCase("Female")){
              rec.jRadioButton2.setSelected(true);
          }
          else if( DBManager.getGender(recnum).equalsIgnoreCase("other")){
              rec.jRadioButton3.setSelected(true);
          }
          
          if(DBManager.getMarital_Status(recnum).equalsIgnoreCase("Single")){
              rec.jComboBox1.setSelectedIndex(0);
          }
          else if(DBManager.getMarital_Status(recnum).equalsIgnoreCase("Married")){
              rec.jComboBox1.setSelectedIndex(1);
          }
          else if(DBManager.getMarital_Status(recnum).equalsIgnoreCase("Divorced")){
              rec.jComboBox1.setSelectedIndex(2);
          }
          rec.nationality.setText(DBManager.getNationality(recnum));
          try {
              rec.eID.setText(DBManager.getEmailID(recnum));
          } catch (SQLException ex) {
              Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
          }
          try {
              rec.aID.setText(DBManager.getAadharID(1));
          } catch (SQLException ex) {
              Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
          }
          
          try {
              rec.address.setText(DBManager.getAddress(recnum));
          } catch (SQLException ex) {
              Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
          }
          
          rec.phNo.setText(DBManager.getPhNo(recnum));
          rec.MbNo.setText(DBManager.getMbNo(recnum));
          rec.subject.setText(DBManager.getSBJ(recnum));
          rec.PID.setText(DBManager.getPID(recnum));
          rec.CG.setText(DBManager.getCG(recnum));
          }
          else{
           //Nothing should happen if the tab already exists...
              javax.swing.JOptionPane.showMessageDialog(this, "The record \'"+DBManager.getName(recnum)+"_"+DBManager.getSerialNumber(recnum)+"\'"+" "+"is already open for editing",null,javax.swing.JOptionPane.ERROR_MESSAGE);
          }
      } catch (SQLException ex) {
          Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
      }
      
    //  jTabbedPane1.setSelectedIndex(jTabbedPane1.getTabCount());
   }
   else{
    ;   
   }
      
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
         try{ 
         
         int RecordsToDelete[]=jList1.getSelectedIndices();
         int serialIDs[]=new int[jList1.getSelectedIndices().length];
       String selectedStrings[]=new String[jList1.getSelectedIndices().length];
       for(int i=0;i<RecordsToDelete.length;i++){
           //jList1.setSelectedIndex(RecordsToDelete[i]);
           selectedStrings[i]=jList1.getSelectedValuesList().get(i).toString();
             int pos=selectedStrings[i].indexOf("_");
             int serialID=Integer.parseInt(selectedStrings[i].substring(pos+1,selectedStrings[i].length()));
           System.out.println(serialID);
             serialIDs[i]=serialID;
               DBManager.setCurrentRow(serialID);
                 DBManager.delete(0);
                   
       }
       DBManager.reload();
       
       javax.swing.JOptionPane.showMessageDialog(this, "Delete operation Successful","Delete", javax.swing.JOptionPane.INFORMATION_MESSAGE);       
       arrangeList();
     recnum=(int)DBManager.getNumberOfRecords();
     int j=jTabbedPane1.getTabCount()-1;
       for( ;j>=0;j--){
           RecordPanel reco=(RecordPanel)(jTabbedPane1.getComponentAt(j));//-1
       for(int k=0;k<serialIDs.length;k++){
           System.out.println("is "+reco.tabNo+"=="+serialIDs[k]);
           if(reco.tabNo==serialIDs[k]){
            this.removeTab1(j--);
            
            
            break;
        }
           else{
           ;  
           }
       }
       }
     }
            catch (SQLException ex) {
             javax.swing.JOptionPane.showMessageDialog(this, "Delete operation failed:"+ex.getMessage(),"ERROR", javax.swing.JOptionPane.ERROR_MESSAGE);
           
         }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       int tabn=jTabbedPane1.getSelectedIndex();

        SaveUi.main(tabn,this);
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Main().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    protected javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

   
}
